# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
variables:
  apiToken: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJkZW1vQGdvcGFkZGxlLmlvIiwiZXhwIjoxNjM1NjMxNjgyLCJqdGkiOiI2OWI0YTdiMGcyOTYxZzQ4OGRnYTM0YWdjZGIxZWM0NDc4NzkiLCJpYXQiOjE2MzU1ODg0ODIsImlzcyI6ImdvcGFkZGxlIn0.xGS5phix2SQUY78qPzzlgxKymfUTupvU5pGvbDNiYQgeoQ8ifAnZ37Pf2MpkJ3cPs-wM9aj52fG2Eh2nQ_RCXqzVxtLZ4zE3d2xCRwv9See6o-X3rd4OD0VD722QOAfz9hWy_05eLk6MFjHRHiHIFI8OV3l-uH-JYGam9O7cS-yFKkXhvcRmCXhAqoLjhF187IHG-a6ywFQ1NvDfj4tbAyr2boLDXN4JuA3Ukq9UOKQ5UCCtu2F7ZkIqHxR_fld9ZhX9nPRhITDTdzNoHtJytpOkOVKQN736hL3oxVm8uBvP8EfkV6_6V6MmK1tsSv4YuBQGgk7uXZLl_2n-rZaWOQ 
  containerID: svceaa2eb4b8c1504c4eaaca067ca96590c689e6
  serviceID: sg8a11a229sgcabdsg4365sg8147sgf8b240a4270f
  applicationID: appsa68808fccc34ac4934cb810c44dc3056e9da 
  projectID: prj4a4df5e7ef3abe4b6deae21e8673b089c951
  releaseID: rel5aa1b5b3e148de40fbea555e39ca6a827c5
  distributionID: discba9b840e77aae4970e9e65e733e2f1cb64

steps:
- script: |
    curl -H 'Authorization: Bearer $(apiToken)' -X POST -d '{"serviceID":"$(containerID)","releaseID":"$(releaseID)","distributionID":"$(distributionID)"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/build > buildinfo.json
    cat buildinfo.json
    buildid="$(cat buildinfo.json | jq -r '.buildID')"
    buildVersion="$(cat buildinfo.json | jq -r '.buildVersion')"
    buildStatusCount = true
    commitMessage=`echo "$(Build.SourceVersionMessage)" | base64`
    for (( ; ; )); do   curl -H 'Authorization: Bearer $(apiToken)' https://portal.gopaddle.io/gateway/v1/$(projectID)/build/$buildid > buildstatusinfo.json;   buildstatus="$(cat buildstatusinfo.json | jq -r '.status')";   echo "$buildstatus";   if [[ $buildstatus == "Failed" ]];   then     echo "build failed";     break;   elif [[ $buildstatus == "Created" ]];   then     echo "build Created successfully";     echo "trigger rolling update";     curl -H 'Authorization: Bearer $(apiToken)' -X PUT -d '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"'"$commitMessage"'"}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/application/$(applicationID) > rollingupdateinfo.json;     rollingUpdateMessage="$(cat rollingupdateinfo.json | jq -r '.message')";     cat rollingupdateinfo.json;     echo "$rollingUpdateMessage";     break;   elif [[ $buildstatus == "Creating" ]];   then     if [[ $buildStatusCount == true ]];     then       echo "build creating...";       buildStatusCount = false;     fi;     continue;   else     echo "unknown status build dropped";     break;   fi; done
    echo '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"'"$commitMessage"'"}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}'
  displayName: 'Build And Rolling Update'
