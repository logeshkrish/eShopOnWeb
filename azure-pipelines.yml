# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
variables:
  apiToken: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJkZW1vQGdvcGFkZGxlLmlvIiwiZXhwIjoxNjM1NjE4NjA3LCJqdGkiOiI2OWI0YTdiMGcyOTYxZzQ4OGRnYTM0YWdjZGIxZWM0NDc4NzkiLCJpYXQiOjE2MzU1NzU0MDcsImlzcyI6ImdvcGFkZGxlIn0.1LNoVdQwdtDyuWQ7PLfTRxIosLt9u4anR1AwpZpzcaiC5Lre1lRvZtRrExOcECDWKr7Gp7KikRiCV2QjBeG17uHHIcnGHZIKWDQ1BftHLZuRjem52N9YfmG3f5PxEW_ofrRJY-wXnHabNhMlW-ULfXZk60oiEYHjt9kOAAbUXhf4J7U2147a4PGNv-Gj1hBEo2BbEK7uJC_pLtYGalP6bR9iOfgZiG_PoPeXGZCJMbKBOA1PwdldbPp_sTBcucxyBuPGAypUEfZmENkwNRY2vtc-oJJOs7XcTslXv7_roG0XUs4qZFR04OmCN0mVD22GcJ9pu5jRY2is4nOJ821AUw
  containerID: svcea5f248a8cd1b6c4166c9a9bc2a0e42237e3b
  serviceID: sg82b9dc4csgba1asg4030sg8141sg0d8868e1effd
  applicationID: appsa2f64551c6923c4653cae6bcd6b0a54180e8 
  projectID: prj4a4df5e7ef3abe4b6deae21e8673b089c951
  releaseID: rel5aa1b5b3e148de40fbea555e39ca6a827c5
  distributionID: discba9b840e77aae4970e9e65e733e2f1cb64

steps:
- script: |
    curl -H 'Authorization: Bearer $(apiToken)' -X POST -d '{"serviceID":"$(containerID)","releaseID":"$(releaseID)","distributionID":"$(distributionID)"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/build > buildinfo.json
    cat buildinfo.json
    buildid="$(cat buildinfo.json | jq -r '.buildID')"
    buildVersion="$(cat buildinfo.json | jq -r '.buildVersion')"
    buildStatusCount = true
    commitMessage=`echo "$(Build.SourceVersionMessage)" | base64`
    for (( ; ; )); do   curl -H 'Authorization: Bearer $(apiToken)' https://portal.gopaddle.io/gateway/v1/$(projectID)/build/$buildid > buildstatusinfo.json;   buildstatus="$(cat buildstatusinfo.json | jq -r '.status')";   echo "$buildstatus";   if [[ $buildstatus == "Failed" ]];   then     echo "build failed";     break;   elif [[ $buildstatus == "Created" ]];   then     echo "build Created successfully";     echo "trigger rolling update";     curl -H 'Authorization: Bearer $(apiToken)' -X PUT -d '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"'"$commitMessage"'"}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/application/$(applicationID) > rollingupdateinfo.json;     rollingUpdateMessage="$(cat rollingupdateinfo.json | jq -r '.message')";     cat rollingupdateinfo.json;     echo "$rollingUpdateMessage";     break;   elif [[ $buildstatus == "Creating" ]];   then     if [[ $buildStatusCount == true ]];     then       echo "build creating...";       buildStatusCount = false;     fi;     continue;   else     echo "unknown status build dropped";     break;   fi; done
    echo '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"'"$commitMessage"'"}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}'
  displayName: 'Build And Rolling Update'
