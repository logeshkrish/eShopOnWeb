# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
variables:
  apiToken: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJkZW1vQGdvcGFkZGxlLmlvIiwiZXhwIjoxNjM1NjI0OTgwLCJqdGkiOiI2OWI0YTdiMGcyOTYxZzQ4OGRnYTM0YWdjZGIxZWM0NDc4NzkiLCJpYXQiOjE2MzU1ODE3ODAsImlzcyI6ImdvcGFkZGxlIn0.vo-elw2klK7FjzV1OMiYzmewuxzPdIWa-DcZMSJAqM98EhSFZjRNkLxqlRVGXW1zJo_QTNnAF267g8aEEBj8sRW7tL8sOrL0RhitIJekl2qBlu53YZrvPMbp6PII1yuWH9hIDlEsOO20GQkyy5uu4p7HKychR1orDFSonIMH5npOxc8FQTaC1DHRC_uxojA3HDEH5hrauZ92tUSAWDLR-Kh2-Q85_einif_wamr5Jb_ZPEPePzSqGalwAYJsW09ERQ4R05nrk9OefMWVUqhbeagd7GCm0Icfk-ZFlVzTf0wg9joX3kbOqJLAx4sHWddo3pruoOFsBOjbss2MQCMwbg
  containerID: svceae3b0685c6e92c4477ca121c049d88210e1c
  serviceID: sg5a6ddf67sg12a8sg479bsg80adsg04493aaa3f17
  applicationID: appsafcad748c2274c40a9c8540c4034895a93ae 
  projectID: prj4a4df5e7ef3abe4b6deae21e8673b089c951
  releaseID: rel5aa1b5b3e148de40fbea555e39ca6a827c5
  distributionID: discba9b840e77aae4970e9e65e733e2f1cb64

steps:
- script: |
    curl -H 'Authorization: Bearer $(apiToken)' -X POST -d '{"serviceID":"$(containerID)","releaseID":"$(releaseID)","distributionID":"$(distributionID)"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/build > buildinfo.json
    cat buildinfo.json
    buildid="$(cat buildinfo.json | jq -r '.buildID')"
    buildVersion="$(cat buildinfo.json | jq -r '.buildVersion')"
    buildStatusCount = true
    commitMessage=`echo "$(Build.SourceVersionMessage)" | base64`
    for (( ; ; )); do   curl -H 'Authorization: Bearer $(apiToken)' https://portal.gopaddle.io/gateway/v1/$(projectID)/build/$buildid > buildstatusinfo.json;   buildstatus="$(cat buildstatusinfo.json | jq -r '.status')";   echo "$buildstatus";   if [[ $buildstatus == "Failed" ]];   then     echo "build failed";     break;   elif [[ $buildstatus == "Created" ]];   then     echo "build Created successfully";     echo "trigger rolling update";     curl -H 'Authorization: Bearer $(apiToken)' -X PUT -d '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"'"$commitMessage"'"}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/application/$(applicationID) > rollingupdateinfo.json;     rollingUpdateMessage="$(cat rollingupdateinfo.json | jq -r '.message')";     cat rollingupdateinfo.json;     echo "$rollingUpdateMessage";     break;   elif [[ $buildstatus == "Creating" ]];   then     if [[ $buildStatusCount == true ]];     then       echo "build creating...";       buildStatusCount = false;     fi;     continue;   else     echo "unknown status build dropped";     break;   fi; done
    echo '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"'"$commitMessage"'"}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}'
  displayName: 'Build And Rolling Update'
