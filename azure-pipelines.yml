# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
variables:
  apiToken: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJkZW1vQGdvcGFkZGxlLmlvIiwiZXhwIjoxNjM1NTUwNzc1LCJqdGkiOiI2OWI0YTdiMGcyOTYxZzQ4OGRnYTM0YWdjZGIxZWM0NDc4NzkiLCJpYXQiOjE2MzU1MDc1NzUsImlzcyI6ImdvcGFkZGxlIn0.q6SiTHMW87vkzhV6DnKxmpvk2zoZao2RVDHpP3Y3ENK3yttJMHqbmgIgFwhVUXUchWFmgUOWDfnJK5zGbYM2obHfnfdfUl3bbntZtcmjutcNl7Ltcu83_oXZcfUKFpueK30ftWHbBsaJxU__4tDcjCK2JHfybpNVbPEZ6XPFoSDmloLfGTQdgv99D42MFrPK_Qbov7Hv2QqjmYN_gCQIHl8eS-UL8B58dw6zKI7BmPib_NwNRT_tKXUj4wBbjzP-OwmPMxFVMzEJ5h5lm8a_CBmAhTPWhQHy3jH7DzwSrKY51Vaw3fcCl-Qy8hUQE6Uc5CkiMhpjsyG8XEa-x1OyPg
  containerID: svcead6db1a1c4f31c40a6ca8f1c1730fe14cb58
  serviceID: sgb24e9d2esg4561sg4184sg8596sgcb162a5aaefd
  applicationID: appsaacdb74fc1ea1c4ce7cbbdbcb8efed8df871
  projectID: prj4a4df5e7ef3abe4b6deae21e8673b089c951
  releaseID: rel5aa1b5b3e148de40fbea555e39ca6a827c5
  distributionID: discba9b840e77aae4970e9e65e733e2f1cb64

steps:
- script: |
    curl -H 'Authorization: Bearer $(apiToken)' -X POST -d '{"serviceID":"$(containerID)","releaseID":"$(releaseID)","distributionID":"$(distributionID)"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/build > buildinfo.json
    cat buildinfo.json
    buildid="$(cat buildinfo.json | jq -r '.buildID')"
    buildVersion="$(cat buildinfo.json | jq -r '.buildVersion')"
    buildStatusCount = true
    for (( ; ; )); do   curl -H 'Authorization: Bearer $(apiToken)' https://portal.gopaddle.io/gateway/v1/$(projectID)/build/$buildid > buildstatusinfo.json;   buildstatus="$(cat buildstatusinfo.json | jq -r '.status')";   echo "$buildstatus";   if [[ $buildstatus == "Failed" ]];   then     echo "build failed";     break;   elif [[ $buildstatus == "Created" ]];   then     echo "build Created successfully";     echo "trigger rolling update";     curl -H 'Authorization: Bearer $(apiToken)' -X PUT -d '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"dGVzdA=="}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}' https://portal.gopaddle.io/gateway/v1/$(projectID)/application/$(applicationID) > rollingupdateinfo.json;     rollingUpdateMessage="$(cat rollingupdateinfo.json | jq -r '.message')";     cat rollingupdateinfo.json;     echo "$rollingUpdateMessage";     break;   elif [[ $buildstatus == "Creating" ]];   then     if [[ $buildStatusCount == true ]];     then       echo "build creating...";       buildStatusCount = false;     fi;     continue;   else     echo "unknown status build dropped";     break;   fi; done
    echo '{"serviceGroups":[{"services":[{"id":"$(containerID)","serviceVersion":"draft","releaseConfig":{"buildID":"'"$buildid"'","version":"'"$buildVersion"'"}}],"id":"$(serviceID)","name":"eshoponweb","version":"draft","description":"dGVzdA=="}],"deploymentTemplateVersion":"draft","updateType":"buildUpdate"}'
    echo "$buildid"
    echo "$buildVersion"
  displayName: 'Build And Rolling Update'
